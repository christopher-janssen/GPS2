---
title: "PostGIS Environment Setup"
author: "Christopher Janssen"
date: "`r lubridate::today()`"
format: html
editor_options:
  chunk_output_type: console
editor:
  markdown:
    wrap: 72
---

## PostGIS Environment Initialization

This document establishes the complete PostGIS spatial database environment for GPS analysis. Running this QMD prepares all necessary components and provides immediate access to GPS data and analysis functions.

```{r setup}
#| message: false
#| warning: false

# Clear environment and establish consistent state
rm(list = ls())
options(conflicts.policy = "depends.ok")

# Load core libraries for GPS analysis and database operations
library(tidyverse)
library(DBI)
library(lubridate)
library(geosphere)
library(here)

# Load GPS analysis functions
source("scripts/r/postgis_connection.R")
```

```{r container-startup}
#| message: false

cat("GPS2 PostGIS Environment Setup\n")
cat("==================================\n")

# Verify Docker container status and start if necessary
container_check <- system("docker ps | grep gps2_geocoding", ignore.stdout = TRUE)

if (container_check != 0) {
  cat("Starting PostGIS container...\n")
  system("cd docker-postgis && docker-compose up -d", ignore.stdout = TRUE)
  cat("Waiting for database initialization...\n")
  Sys.sleep(15)
} else {
  cat("PostGIS container already running\n")
}
```

```{r database-health-check}
# Establish database connection and verify system status
tryCatch({
  con <- connect_to_gps2_db()
  
  # Query database status metrics
  table_count <- dbGetQuery(con, "SELECT COUNT(*) as tables FROM information_schema.tables WHERE table_schema = 'gps2';")
  point_count <- dbGetQuery(con, "SELECT COUNT(*) as points FROM gps2.gps_stationary_points;")
  participant_count <- dbGetQuery(con, "SELECT COUNT(DISTINCT subid) as participants FROM gps2.gps_stationary_points;")
  
  cat("   Database Status:\n")
  cat("   Schema Tables:", table_count$tables, "\n")
  cat("   GPS Points:", format(point_count$points, big.mark = ","), "\n")
  cat("   Participants:", participant_count$participants, "\n")
  
  dbDisconnect(con)
  
}, error = function(e) {
  cat("Database connection failed. Verify container status with: docker-compose ps\n")
})
```

```{r convenience-functions}
# Define convenience functions for streamlined GPS analysis workflow

# Establish quick database connection
quick_connect <- function() {
  connect_to_gps2_db()
}

# Retrieve complete GPS dataset for specified participant
get_participant_data <- function(participant_id) {
  con <- quick_connect()
  data <- dbGetQuery(con, paste0("
    SELECT subid, lat, lon, dttm_obs, dist, duration, speed, movement_state
    FROM gps2.gps_stationary_points 
    WHERE subid = ", participant_id, "
    ORDER BY dttm_obs;
  "))
  dbDisconnect(con)
  return(data)
}

# Retrieve cluster analysis results for specified participant
get_participant_clusters <- function(participant_id) {
  con <- quick_connect()
  clusters <- dbGetQuery(con, paste0("
    SELECT cluster_id, lat, lon, n_points, first_visit, last_visit, 
           total_visits, total_duration_hours, unique_days
    FROM gps2.location_clusters 
    WHERE subid = ", participant_id, "
    ORDER BY total_duration_hours DESC, total_visits DESC, cluster_id;
  "))
  dbDisconnect(con)
  return(clusters)
}

# Execute spatial proximity queries around specified coordinates
nearby_points <- function(lat, lon, radius_meters = 100) {
  con <- quick_connect()
  nearby <- dbGetQuery(con, paste0("
    SELECT subid, lat, lon, dttm_obs,
           ROUND(ST_Distance(location::geography, ST_SetSRID(ST_MakePoint(", lon, ", ", lat, "), 4326)::geography)) as distance_m
    FROM gps2.gps_stationary_points
    WHERE ST_DWithin(location::geography, ST_SetSRID(ST_MakePoint(", lon, ", ", lat, "), 4326)::geography, ", radius_meters, ")
    ORDER BY distance_m
    LIMIT 20;
  "))
  dbDisconnect(con)
  return(nearby)
}

# Query database for participant summary statistics
get_participant_summary <- function() {
  con <- quick_connect()
  summary <- dbGetQuery(con, "
    SELECT 
      subid,
      COUNT(*) as total_points,
      MIN(dttm_obs) as first_observation,
      MAX(dttm_obs) as last_observation,
      COUNT(DISTINCT DATE(dttm_obs)) as unique_days,
      ROUND(ST_X(ST_Centroid(ST_Collect(location)))::numeric, 4) as center_lon,
      ROUND(ST_Y(ST_Centroid(ST_Collect(location)))::numeric, 4) as center_lat
    FROM gps2.gps_stationary_points
    GROUP BY subid
    ORDER BY total_points DESC;
  ")
  dbDisconnect(con)
  return(summary)
}
```
