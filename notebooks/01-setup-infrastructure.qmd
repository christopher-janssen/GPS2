---
title: "GPS22 Project: Infrastructure Setup"
author: "Christopher Janssen"
date: "`r lubridate::today()`"
format:
  html:
    self-contained: true
editor_options:
  chunk_output_type: console
editor:
  markdown:
    wrap: 72
---

# Download Docker Desktop

Download: [DockerDesktop](https://www.docker.com/products/docker-desktop/)

(You can link the Docker Account to your Github for easy login/access)

# Infrastructure Setup & Verification

This notebook sets up and verifies the Docker infrastructure for the GPS
clustering and zoning analysis project.

## Package Management Setup

```{r setup}
#| message: false
#| warning: false

source(here::here("scripts/r/setup.R"))
source(here::here("scripts/r/database.R"))
```

## Overview

We'll be setting up:

-   PostGIS database container for spatial data storage
-   Nominatim container for reverse geocoding
-   Volume mounts to research drive
-   Database extensions and initial schema

## Docker Environment Check

First, let's see if Docker is running.

```{r}
system("docker --version && docker-compose --version", intern = TRUE) |> paste0()
```

Next, let's check for the directory and it's contents

```{r}
system('if [ -d "docker-compose" ]; then ls -l docker-compose/; else echo "docker-compose directory not found - needs to be created"; fi')
```

## Start Infrastructure

Start up the container:

```{r}
system("cd docker-compose && docker-compose up -d")
```

Check to see if it was successfully created:

```{r}
system("cd docker-compose && docker-compose ps")
```

## Database Connection Configuration

Now, let's test the connection (will fail until containers are running)

```{r}
test_db_connection()
```

## PostGIS Extension Verification

And double check that POSTGIS is working as intended:

```{r}
#| cache: false
# Verify PostGIS extensions are installed and working
con <- connect_gps_db()

if (is.null(con)) {
  message("Cannot connect to database")
  postgis_ready <- FALSE
} else {
  # Check PostGIS extension
  extensions <- dbGetQuery(con, 
    "SELECT * FROM pg_extension WHERE extname IN ('postgis', 'postgis_topology');")
  
  if (nrow(extensions) > 0) {
    message("✓ PostGIS extensions found")
    
    # Check PostGIS version
    postgis_version <- dbGetQuery(con, "SELECT PostGIS_Version();")
    message("PostGIS Version: ", postgis_version[1,1])
    postgis_ready <- TRUE
  } else {
    message("✗ PostGIS extensions not found")
    postgis_ready <- FALSE
  }
  
  disconnect_gps_db(con)
}
```

## Research Drive Mount Verification

Now let's check to see if the research data volume is properly mounted.
You should see all of the directories within `risk`!

```{r}
system("cd docker-compose && docker-compose exec -T postgis ls -l /research_data/")
```

## Database Schema Check

Let's check to see if all of the tables were properly generated as well,
as of right now, you should see 21!

```{r}
#| cache: false
check_database_schema <- function() {
  con <- connect_gps_db()
  
  if (is.null(con)) {
    message("✗ Cannot connect to database")
    return(FALSE)
  }
  
  tables <- dbListTables(con)
  
  if (length(tables) > 0) {
    message("✓ Found ", length(tables), " tables: ", paste(tables, collapse = ", "))
  } else {
    message("✗ No tables found - run initialization scripts")
  }
  
  disconnect_gps_db(con)
  return(length(tables) > 0)
}

check_database_schema()
```

## Nominatim API Test

Let's test the local distribution of Nominatim as well.

```{r}
#| cache: false
test_nominatim <- function() {
  nominatim_url <- "http://localhost:8080"
  # Test with Taco Bell Cantina on State Street, Madison coordinates
  test_query <- paste0(nominatim_url, "/reverse?format=json&lat=43.0749694&lon=-89.3943515")
  
  safe_request <- safely(~ GET(test_query))
  response_result <- safe_request()
  
  if (is.null(response_result$error)) {
    response <- response_result$result
    if (status_code(response) == 200) {
      result <- content(response, "text") |> fromJSON()
      message("✓ Nominatim container is working")
      message("Test reverse geocode result: ", result$display_name)
      return(TRUE)
    } else {
      message("✗ Nominatim container not responding")
      return(FALSE)
    }
  } else {
    message("Nominatim request failed: ", response_result$error$message)
    return(FALSE)
  }
}

# Test Nominatim (will fail until container is running)
test_nominatim()
```

## Infrastructure Status Summary

```{r}
run_infrastructure_checks <- function() {
  message("=== Infrastructure Setup Status ===")
  
  results <- list(
    docker_available = system("docker --version", ignore.stdout = TRUE) == 0,
    db_connection = test_db_connection(),
    postgis_ready = FALSE,
    schema_ready = FALSE,
    nominatim_ready = FALSE
  )
  
  # Only run these if database is available
  if (results$db_connection) {
    results$postgis_ready <- postgis_ready
    results$schema_ready <- check_database_schema()
  }
  
  # Test Nominatim separately
  results$nominatim_ready <- test_nominatim()
  
  message("\nStatus Summary:")
  message("- Docker available: ", ifelse(results$docker_available, "✓", "✗"))
  message("- Database connection: ", ifelse(results$db_connection, "✓", "✗"))
  message("- PostGIS extensions: ", ifelse(results$postgis_ready, "✓", "✗"))
  message("- Database schema: ", ifelse(results$schema_ready, "✓", "✗"))
  message("- Nominatim API: ", ifelse(results$nominatim_ready, "✓", "✗"))
  
  all_ready <- all(unlist(results))
  message("\nOverall Status: ", ifelse(all_ready, "✓ Ready", "✗ Setup required"))
  
  return(results)
}

# Run all checks
infrastructure_status <- run_infrastructure_checks()
```

## Next Steps

Based on the infrastructure status:

1.  **If Docker containers are not running**: Create
    `docker-compose.yml` and initialization scripts
2.  **If database schema is missing**: Run initialization SQL scripts\
3.  **If all checks pass**: Proceed to `02-data-import.qmd`

### Troubleshooting Commands

```{bash eval=FALSE}
# View container logs if needed
# docker-compose logs postgis
# docker-compose logs nominatim

# Stop containers if needed
# cd docker-compose
# docker-compose down

# Restart containers
# docker-compose up -d --force-recreate
```
